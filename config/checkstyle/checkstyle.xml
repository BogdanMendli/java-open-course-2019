<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.

    * with some custom improvements
 -->

<module name = "Checker">
    <property name="charset" expr="UTF-8"/>

    <property name="severity" expr="warning"/>

    <property name="fileExtensions" expr="java, properties, xml"/>

    <module name="FileTabCharacter">
        <property name="eachLine" expr="true"/>
    </module>

    <module name="TreeWalker">
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" expr="CHECKSTYLE_OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat" expr="CHECKSTYLE_ON\: ([\w\|]+)"/>
            <property name="checkFormat" expr="$1"/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" expr="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      expr="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      expr="Consider using special escape sequence instead of octal expr or Unicode escaped expr."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" expr="true"/>
            <property name="allowByTailComment" expr="true"/>
            <property name="allowNonPrintableEscapes" expr="true"/>
        </module>
        <module name="LineLength">
            <property name="max" expr="120"/>
            <property name="ignorePattern" expr="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" expr="TEXT"/>
            <property name="tokens"
                      expr="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly"/>
        <module name="RightCurly">
            <property name="id" expr="RightCurlySame"/>
            <property name="tokens"
                      expr="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" expr="RightCurlyAlone"/>
            <property name="option" expr="alone"/>
            <property name="tokens"
                      expr="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                    INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" expr="true"/>
            <property name="allowEmptyLambdas" expr="true"/>
            <property name="allowEmptyMethods" expr="true"/>
            <property name="allowEmptyTypes" expr="true"/>
            <property name="allowEmptyLoops" expr="true"/>
            <message key="ws.notFollowed"
                     expr="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     expr="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" expr="true"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" expr="SeparatorWrapDot"/>
            <property name="tokens" expr="DOT"/>
            <property name="option" expr="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" expr="SeparatorWrapComma"/>
            <property name="tokens" expr="COMMA"/>
            <property name="option" expr="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" expr="SeparatorWrapEllipsis"/>
            <property name="tokens" expr="ELLIPSIS"/>
            <property name="option" expr="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" expr="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" expr="ARRAY_DECLARATOR"/>
            <property name="option" expr="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" expr="SeparatorWrapMethodRef"/>
            <property name="tokens" expr="METHOD_REF"/>
            <property name="option" expr="nl"/>
        </module>
        <module name="PackageName">
            <property name="format" expr="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     expr="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     expr="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" expr="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     expr="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" expr="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     expr="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" expr="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     expr="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property name="format" expr="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     expr="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" expr="VARIABLE_DEF"/>
            <property name="format" expr="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     expr="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" expr="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     expr="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" expr="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     expr="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" expr="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     expr="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     expr="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     expr="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     expr="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     expr="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" expr="4"/>
            <property name="braceAdjustment" expr="0"/>
            <property name="caseIndent" expr="4"/>
            <property name="throwsIndent" expr="4"/>
            <property name="lineWrappingIndentation" expr="4"/>
            <property name="arrayInitIndent" expr="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" expr="false"/>
            <property name="allowedAbbreviationLength" expr="1"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="CustomImportOrder">
            <property name="separateLineBetweenGroups" expr="true"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore">
            <property name="tokens"
                      expr="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" expr="true"/>
        </module>
        <module name="ParenPad"/>
        <module name="OperatorWrap">
            <property name="option" expr="NL"/>
            <property name="tokens"
                      expr="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" expr="AnnotationLocationMostCases"/>
            <property name="tokens"
                      expr="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" expr="AnnotationLocationVariables"/>
            <property name="tokens" expr="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" expr="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" expr="@param, @return, @throws, @deprecated"/>
            <property name="target"
                      expr="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="MethodName">
            <property name="format" expr="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     expr="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" expr="expected"/>
        </module>
        <module name="CommentsIndentation"/>
    </module>
</module>